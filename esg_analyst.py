# -*- coding: utf-8 -*-
"""ESG ANALYST

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M5T6hQ5kTlbxk4l5ggO9BekenwFRcLLV
"""

# ===========================================
# ESG Dashboard - ETL Pipeline (2025 Ready)
# Author: Ayush Dutta
# ===========================================

import yfinance as yf
import pandas as pd
import requests
import zipfile
import io
import datetime

# Utility: today's date
today = datetime.date.today().strftime("%Y-%m-%d")

# ----------------------------
# Step 1: Company ESG Scores + Stock Data
# ----------------------------

companies = ["AAPL", "MSFT", "TSLA", "JPM", "XOM", "GOOGL", "AMZN", "NVDA", "META", "V"]

company_data = []

for ticker in companies:
    t = yf.Ticker(ticker)

    # ESG scores (may not be available for all tickers)
    try:
        esg = t.sustainability.T  # Transpose for easier reading
    except Exception:
        esg = None

    # Stock history (last 5 years)
    hist = t.history(period="5y").reset_index()
    hist["Ticker"] = ticker
    hist["Last_Updated"] = today

    # Save stock history
    hist.to_csv(f"{ticker}_stock_history.csv", index=False)

    if esg is not None:
        esg["Ticker"] = ticker
        esg["Last_Updated"] = today
        company_data.append(esg.reset_index(drop=True))

# Combine ESG data
if company_data:
    esg_df = pd.concat(company_data, ignore_index=True)
    print("\nCompany ESG Data (sample):")
    print(esg_df.head())   # Preview
    esg_df.to_csv("company_esg.csv", index=False)
else:
    print("⚠️ No ESG data available for selected companies")

# ----------------------------
# Step 2: Green vs Non-Green Investments (ETF Returns)
# ----------------------------

etfs = {
    "ICLN": "iShares Global Clean Energy ETF",
    "^GSPC": "S&P 500 Index"
}

etf_data = pd.DataFrame()

for ticker, name in etfs.items():
    t = yf.Ticker(ticker)
    hist = t.history(period="5y")["Close"].reset_index()
    hist.rename(columns={"Close": name}, inplace=True)
    hist["Last_Updated"] = today

    if etf_data.empty:
        etf_data = hist
    else:
        etf_data = pd.merge(etf_data, hist, on=["Date", "Last_Updated"], how="outer")

# Calculate daily returns
for name in etfs.values():
    etf_data[f"{name}_Return"] = etf_data[name].pct_change()

print("\nETF Data (sample):")
print(etf_data.head())
etf_data.to_csv("etf_comparison.csv", index=False)

# ----------------------------
# Step 3: Country-Level CO₂ & Renewable Energy Data (World Bank)
# ----------------------------

def fetch_worldbank_data(indicator, name):
    url = f"http://api.worldbank.org/v2/en/indicator/{indicator}?downloadformat=csv"
    r = requests.get(url)

    with zipfile.ZipFile(io.BytesIO(r.content)) as z:
        for filename in z.namelist():
            if filename.endswith(".csv") and "Metadata" not in filename:
                df = pd.read_csv(z.open(filename), skiprows=4)
                df = df.melt(
                    id_vars=["Country Name", "Country Code"],
                    var_name="Year",
                    value_name=name
                )
                return df

# Indicators
co2 = fetch_worldbank_data("EN.ATM.CO2E.PC", "CO2_per_capita")
renewable = fetch_worldbank_data("EG.FEC.RNEW.ZS", "Renewable_percent")

# Merge datasets
country_data = pd.merge(co2, renewable, on=["Country Name", "Country Code", "Year"], how="inner")
country_data["Last_Updated"] = today

print("\nCountry Data (sample):")
print(country_data.head())
country_data.to_csv("country_data.csv", index=False)

# ----------------------------
# Done
# ----------------------------
print("\n✅ ETL Complete")
print("Files generated:")
print("- company_esg.csv")
print("- *_stock_history.csv (one per company)")
print("- etf_comparison.csv")
print("- country_data.csv")